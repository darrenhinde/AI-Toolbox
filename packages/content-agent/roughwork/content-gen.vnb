{cells:[{kind:1,language:'markdown',value:'#### This it to create a flow for content and build to test how it works. ',metadata:{id:'leGqByZem2b7dKgw1Grc1'}},{kind:2,language:'typescriptreact',value:'',metadata:{id:'mPX9_NGtoUw3eBZ90tPz0'}},{kind:2,language:'typescriptreact',value:"import dotenv from 'dotenv';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name of the current module\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Load environment variables from .env file\ndotenv.config({ path: path.resolve(__dirname, '../../../.env') });\n\n// Access the Notion API key and test page ID\nconst NOTION_API_KEY = process.env.NOTION_API_KEY;\nconst TEST_PAGE_ID = process.env.TEST_PAGE_ID;\n\nif (!NOTION_API_KEY || !TEST_PAGE_ID) {\n  throw new Error('NOTION_API_KEY or TEST_PAGE_ID is not set in the .env file');\n}\n\nconsole.log('Notion API Key:', NOTION_API_KEY);\nconsole.log('Test Page ID:', TEST_PAGE_ID);\n",metadata:{id:'3DvPF8UAf729L0n21k7Iu'}},{kind:2,language:'typescriptreact',value:'import { runContentGenerationAgent } from \'../src/single-agents/content-idea-agent\';\nimport { getModel } from \'../src/models/index\';\nimport { CreateDatabaseTool, AddPageToDatabaseTool } from \'../src/tools/notion-tools\';\nimport { z } from \'zod\';\nimport { generateObject } from \'ai\';\n\nasync function generateContentIdeas(topic: string) {\n  console.log("Generating initial content ideas...");\n  return await runContentGenerationAgent(topic);\n}\n\nasync function refineIdeas(ideas: any) {\n  console.log("Refining ideas...");\n  const model = getModel(\'gpt-4o-mini\');\n\n  const schema = z.object({\n    refinedIdeas: z.array(z.object({\n      title: z.string(),\n      description: z.string(),\n      keyPoints: z.array(z.string()),\n      targetAudience: z.string(),\n      estimatedLength: z.string()\n    })).min(3),\n    overallStrategy: z.string()\n  });\n\n  const prompt = `Refine and improve the following content ideas:\\n\\n${JSON.stringify(ideas, null, 2)}\\n\\nProvide a more focused and strategic approach for each idea, including key points to cover.`;\n\n  const { object } = await generateObject({\n    model,\n    schema,\n    prompt,\n    //output: "object",\n    maxRetries: 1,\n  });\n    console.log("content ideas", object)\n  return object;\n}\n\nasync function postIdeasToNotion(refinedIdeas: any) {\n  console.log("Posting ideas to Notion...");\n  const createDatabase = await CreateDatabaseTool.execute({\n    parentPageId: TEST_PAGE_ID, // Replace with actual Notion page ID\n    title: "Content Ideas",\n    properties: {\n      Title: { type: "title" },\n      Description: { type: "rich_text" },\n      "Key Points": { type: "rich_text" },\n      "Target Audience": { type: "select", options: [{ name: "General", color: "blue" }, { name: "Professionals", color: "green" }, { name: "Students", color: "red" }] },\n      "Estimated Length": { type: "select", options: [{ name: "Short", color: "gray" }, { name: "Medium", color: "yellow" }, { name: "Long", color: "orange" }] }\n    }\n  });\n\n  const databaseId = createDatabase.databaseId;\n\n  for (const idea of refinedIdeas.refinedIdeas) {\n    await AddPageToDatabaseTool.execute({\n      databaseId,\n      properties: {\n        Title: { title: [{ text: { content: idea.title } }] },\n        Description: { rich_text: [{ text: { content: idea.description } }] },\n        "Key Points": { rich_text: [{ text: { content: idea.keyPoints.join("\\n") } }] },\n        "Target Audience": { select: { name: idea.targetAudience } },\n        "Estimated Length": { select: { name: idea.estimatedLength } }\n      }\n    });\n  }\n\n  console.log("Ideas successfully posted to Notion!");\n}\n\n\n',metadata:{id:'3TRv98AJh0lNcobeSJcQ4'}},{kind:2,language:'typescriptreact',value:'const initialIdeas = await generateContentIdeas("Starting with AI");',metadata:{id:'-6ct6ShgS_tuHxqszWZtO'}},{kind:2,language:'typescriptreact',value:'async function contentGenerationWorkflow(topic: string) {\n    const initialIdeas = await generateContentIdeas(topic);\n    const refinedIdeas = await refineIdeas(initialIdeas);\n    await postIdeasToNotion(refinedIdeas);\n  }\n  \n  // Example usage\n  contentGenerationWorkflow("Artificial Intelligence in Healthcare");',metadata:{id:'3tXHp5f93bopQ96EIRqPJ'}}]}